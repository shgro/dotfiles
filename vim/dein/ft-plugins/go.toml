[[plugins]]
repo = 'zchee/deoplete-go'
build = 'make'
on_ft = 'go'
hook_source = '''
let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'

" call deoplete#custom#source('go', 'matchers', ['matcher_full_fuzzy'])
" call deoplete#custom#source('go', 'sorters', [])
let g:deoplete#sources#go#align_class = 1
" let g:deoplete#sources#go#cgo = 1
" let g:deoplete#sources#go#cgo#libclang_path= expand("/Library/Developer/CommandLineTools/usr/lib/libclang.dylib")
" let g:deoplete#sources#go#cgo#sort_algo = 'alphabetical'
let g:deoplete#sources#go#gocode_binary = globpath($GOPATH,"/bin/gocode")
" let g:deoplete#sources#go#json_directory = globpath($NVIM_HOME,"/plugged/deoplete-go/data/json/*/").expand("$GOOS")."_".expand("$GOARCH")
let g:deoplete#sources#go#package_dot = 1
let g:deoplete#sources#go#on_event = 1
let g:deoplete#sources#go#pointer = 1
let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
let g:deoplete#sources#go#use_cache = 1
'''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_source = '''
let g:go_jump_to_error = 0
" BufWinEnter *.go GoFmt
" BufWritePre *.go GoFmt
compiler go
:highlight goExtraVars cterm=bold ctermfg=214
:match goExtraVars /\<ok\>\|\<err\>/
let g:go_fmt_command = "goimports"
" TODO if deoppet is fully worked replace neosnippet
" let g:go_snippet_engine = "deoppet"
" TODO remove this
let g:go_snippet_engine = "neosnippet"
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_auto_type_info = 1
let g:go_auto_sameids = 1
let g:go_list_type = "quickfix"
let g:go_addtags_transform = "snakecase"
let g:go_alternate_mode = "edit"
set runtimepath+=globpath($GOROOT, "/misc/vim")
set runtimepath+=globpath($GOPATH, "src/github.com/nsf/gocode/vim")
nnoremap <F5> :Gorun<CR>
nnoremap gd <Plug>(go-def-split)
'''
