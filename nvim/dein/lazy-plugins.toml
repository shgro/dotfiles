[[plugins]]
repo = 'Shougo/denite.nvim'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
let g:NERDTreeShowHidden=1
nnoremap <silent><C-e> :NERDTreeToggle<CR>
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
'''

[[plugins]]
repo = 'lambdalisue/vim-findent'

[[plugins]]
repo = 'prettier/vim-prettier'
build = 'npm install'
on_ft = ['css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'yaml', 'html']
hook_add = '''
let g:prettier#autoformat = 0
autocmd BufWritePre *.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.yaml,*.html PrettierAsync
'''

#
# language-server
#

[[plugins]]
repo = 'neoclide/coc.nvim'
build = 'yarn install'
hook_add = '''
let g:coc_global_extensions = [
  \ 'coc-json',
  \ 'coc-tsserver',
  \ 'coc-yaml'
  \ ]

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> for trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> for confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` for navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K for show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
vmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
vmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use `:Format` for format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` for fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)


" Add diagnostic info for https://github.com/itchyny/lightline.vim
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'cocstatus', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'cocstatus': 'coc#status'
      \ },
      \ }



" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
'''

#
# toml
#

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

#
# markdown
#

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']
hook_source = '''
autocmd BufRead,BufNewFile *.mkd  set filetype=markdown
autocmd BufRead,BufNewFile *.md  set filetype=markdown
" Need: kannokanno/previm
nnoremap <silent> <C-p> :PrevimOpen<CR> " Ctrl-pでプレビュー
" 自動で折りたたまないようにする
let g:vim_markdown_folding_disabled=1
'''

[[plugins]]
repo = 'kannokanno/previm'
on_ft = ['markdown']
hook_source = '''
let g:previm_open_cmd = 'open -a Google\ Chrome'
'''

#
# javascript
#

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript']
hook_source = '''
let g:javascript_plugin_jsdoc = 1
'''

[[plugins]]
repo = 'jelera/vim-javascript-syntax'

#
# typescript
#

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']

# [[plugins]]
# repo = 'Quramy/tsuquyomi'
# on_ft = ['typescript']
# hook_source = '''
# let g:tsuquyomi_completion_detail = 1
# let g:tsuquyomi_shortest_import_path = 1
# '''

#
# go
#

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']

# [[plugins]]
# repo = 'zchee/deoplete-go'
# build = 'make'
# on_ft = ['go']
# hook_source = '''
# let g:deoplete#sources#go#gocode_binary = $GOPATH . '/bin/gocode'
# let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
# '''

#
# sql
#

[[plugins]]
repo = 'vim-scripts/dbext.vim'
on_ft = ['sql']

#
#
#

[[plugins]]
repo = 'delphinus/vim-firestore'
on_ft = ['firestore']

#
# plantuml
#

[[plugins]]
repo = 'aklt/plantuml-syntax'
on_ft = ['plantuml']
hook_source = '''
au FileType plantuml command! OpenUml :!open -a Google\ Chrome %
nnoremap <silent> <C-p> :OpenUml<CR>
'''
